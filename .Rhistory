x = temp$Response
sep = ","
View(temp)
strsplit(temp$Response, split = ",")
#give the answers real names
names(answers)
#split the strings, returns a list
answers <- strsplit(x, split = sep)
answers
#give the answers real names
names(answers)
View(answers)
id
id <- temp$Sub.ID
#give the answers real names
names(answers) <- id
View(answers)
unlist(answers)
unlist(answers, use.names = T)
unlist(answers, use.names = F)
do.call(rbind, answers)
?unlist
#list to long
df <- unlist(answers)
type(Df)
type(df)
class(df)
#list to long
df <- as.data.frame(unlist(answers))
df
View(df)
#list to long
df <- as.data.frame(response = unlist(answers))
#list to long
df <- data.frame(response = unlist(answers))
df
head(df)
#take out any whitespace
x <- gsub("[[:space:]]", "", x)
#split the strings, returns a list
answers <- strsplit(x, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
head(Df)
head(df)
id
length(answers)
lapply(answers, length)
unlist(lapply(answers, length))
rep(id, unlist(lapply(answers, length)))
#add participant id and position tag
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
View(df)
#take out any whitespace
x <- gsub("\\s+", "", x)
#split the strings, returns a list
answers <- strsplit(x, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id and position tag
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
?ave
ave(id, id, FUN = seq_along)
ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
arrange_data <- function(x, sep, id, other = NULL){
#take out any whitespace
x <- gsub("\\s+", "", x)
#split the strings, returns a list
answers <- strsplit(x, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
arrange_data <- function(x, sep, id, other = NULL){
#take out any whitespace
x <- gsub("\\s+", "", x)
#split the strings, returns a list
answers <- strsplit(x, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
arrange_data <- function(responses, sep, id, other = NULL){
#take out any whitespace
responses <- gsub("\\s+", "", responses)
#split the strings, returns a list
answers <- strsplit(responses, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
stuff <- arrange_data(responses = temp$Response, sep = ",", id = temp$Sub.ID, other = temp$Disease.Condition)
View(stuff)
stuff <- arrange_data(responses = temp$Response, sep = ",", id = temp$Sub.ID, other = temp$Disease.Condition)
View(stuff)
View(temp)
arrange_data <- function(responses, sep, id, other = NULL){
#take out any whitespace
responses <- gsub("\\s+", " ", responses)
#split the strings, returns a list
answers <- strsplit(responses, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
stuff <- arrange_data(responses = temp$Response, sep = ",", id = temp$Sub.ID, other = temp$Disease.Condition)
View(stuff)
arrange_data <- function(responses, sep, id, other = NULL){
#take out any whitespace
responses <- gsub("\\s+|^\\s", " ", responses)
#split the strings, returns a list
answers <- strsplit(responses, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
stuff <- arrange_data(responses = temp$Response, sep = ",", id = temp$Sub.ID, other = temp$Disease.Condition)
View(stuff)
arrange_data <- function(responses, sep, id, other = NULL){
#take out any whitespace
responses <- gsub("\\s+|$\\s", " ", responses)
#split the strings, returns a list
answers <- strsplit(responses, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
stuff <- arrange_data(responses = temp$Response, sep = ",", id = temp$Sub.ID, other = temp$Disease.Condition)
View(stuff)
df$response <- trimws(df$response, "both")
arrange_data <- function(responses, sep, id, other = NULL){
#split the strings, returns a list
answers <- strsplit(responses, split = sep)
#list to long
df <- data.frame(response = unlist(answers))
#take out any extra spaces
df$response <- gsub("\\s+", " ", df$response)
df$response <- trimws(df$response, "both")
#add participant id
df$Sub.ID <- rep(id, unlist(lapply(answers, length)))
#add position tag
df$position <- ave(df$Sub.ID, df$Sub.ID, FUN = seq_along)
#add back in other variables
if(!is.null(other)){
#make a dataframe
other <- as.data.frame(other)
#check its length
if(nrow(other) != length(id)){
stop("The number of rows or items in the additional columns need to match
the number of participants in the id column.")
} else {
other$Sub.ID <- id
final_df <- merge(df, other, by = "Sub.ID")
}
#otherwise just return final data
} else {
final_df <- df
}
return(final_df)
}
stuff <- arrange_data(responses = temp$Response, sep = ",", id = temp$Sub.ID, other = temp$Disease.Condition)
View(stuff)
names(stuff)
DF <- read.csv("data/wide_data.csv")
DF
DF_long <- arrange_data(responses = DF$Response, sep = ",",
id = DF$Sub.ID, other = DF$Disease.Condition)
DF_long
DF_long <- arrange_data(responses = DF$Response, sep = ",",
id = DF$Sub.ID, other = DF[ , "Disease.Condition"])
View(DF_Long)
View(DF_ong)
View(DF_long)
DF <- read.csv("data/wide_data.csv")
head(DF)
DF <- read.csv("data/rater_data.csv")
head_DF
head(DF)
DF$rater1_word
str(DF$rater1_word)
stuff = as.factor(DF$rater1_word)
stuff2 = as.factor(DF$rater2_word)
stuff-stuff2
stuff == stuff2
rater1 <- as.character(rater1)
kappa <- function(rater1, rater2) {
#if rater1 is a string
if(is.character(rater1)|is.factor(rater1)){
#if rater2 is also a string
if(is.character(rater2)|is.factor(rater2)){
rater1 <- as.character(rater1)
rater2 <- as.character(rater2)
match <- rater1 == rater2
p_agree <- sum(match)
}
}
#
#   temp <- na.omit(data.frame(rater1, rater2))
#   pa <- temp[ , 1] - temp[ , 2]
#   pa <- temp2[1, 1]
#   pa <- (pa / nrow(temp))
#
#   temp$pa = temp[ , 1] - temp[ , 2]
#   temp$pa2 = temp[ , 1] + temp[ , 2]
#
#   x_yes = sum(temp[ , 1] == 1)
#   x_no = sum(temp[ , 1] == 0)
#
#   y_yes = sum(temp[ , 2] == 1)
#   y_no = sum(temp[ , 2] == 0)
#
#   both_yes = sum(temp[, 4] == 2)
#   both_no = sum(temp[, 4] == 0)
#
#   yes = ((x_yes / nrow(temp)) * (y_yes / nrow(temp)))
#   no = ((x_no / nrow(temp)) * (y_no / nrow(temp)))
#
#   pe =  yes + no
#
#   output = ((pa - pe) / (1 - pe))
#
#   print(output)
#
#   print(paste("percent agreement:", round(pa, digits = 2)))
#   invisible(round(output, digits = 2))
}
kappa(DF$rater1_word, DF$rater2_word)
kappa <- function(rater1, rater2) {
#if rater1 is a string
if(is.character(rater1)|is.factor(rater1)){
#if rater2 is also a string
if(is.character(rater2)|is.factor(rater2)){
rater1 <- as.character(rater1)
rater2 <- as.character(rater2)
match <- rater1 == rater2
p_agree <- sum(match)
return(p_agree)
}
}
#
#   temp <- na.omit(data.frame(rater1, rater2))
#   pa <- temp[ , 1] - temp[ , 2]
#   pa <- temp2[1, 1]
#   pa <- (pa / nrow(temp))
#
#   temp$pa = temp[ , 1] - temp[ , 2]
#   temp$pa2 = temp[ , 1] + temp[ , 2]
#
#   x_yes = sum(temp[ , 1] == 1)
#   x_no = sum(temp[ , 1] == 0)
#
#   y_yes = sum(temp[ , 2] == 1)
#   y_no = sum(temp[ , 2] == 0)
#
#   both_yes = sum(temp[, 4] == 2)
#   both_no = sum(temp[, 4] == 0)
#
#   yes = ((x_yes / nrow(temp)) * (y_yes / nrow(temp)))
#   no = ((x_no / nrow(temp)) * (y_no / nrow(temp)))
#
#   pe =  yes + no
#
#   output = ((pa - pe) / (1 - pe))
#
#   print(output)
#
#   print(paste("percent agreement:", round(pa, digits = 2)))
#   invisible(round(output, digits = 2))
}
kappa(DF$rater1_word, DF$rater2_word)
nrow(DF)
kappa <- function(rater1, rater2) {
#if rater1 is a string
if(is.character(rater1)|is.factor(rater1)){
#if rater2 is also a string
if(is.character(rater2)|is.factor(rater2)){
rater1 <- as.character(rater1)
rater2 <- as.character(rater2)
match <- rater1 == rater2
p_agree <- sum(match) / length(match) * 100
return(p_agree)
}
}
#
#   temp <- na.omit(data.frame(rater1, rater2))
#   pa <- temp[ , 1] - temp[ , 2]
#   pa <- temp2[1, 1]
#   pa <- (pa / nrow(temp))
#
#   temp$pa = temp[ , 1] - temp[ , 2]
#   temp$pa2 = temp[ , 1] + temp[ , 2]
#
#   x_yes = sum(temp[ , 1] == 1)
#   x_no = sum(temp[ , 1] == 0)
#
#   y_yes = sum(temp[ , 2] == 1)
#   y_no = sum(temp[ , 2] == 0)
#
#   both_yes = sum(temp[, 4] == 2)
#   both_no = sum(temp[, 4] == 0)
#
#   yes = ((x_yes / nrow(temp)) * (y_yes / nrow(temp)))
#   no = ((x_no / nrow(temp)) * (y_no / nrow(temp)))
#
#   pe =  yes + no
#
#   output = ((pa - pe) / (1 - pe))
#
#   print(output)
#
#   print(paste("percent agreement:", round(pa, digits = 2)))
#   invisible(round(output, digits = 2))
}
kappa(DF$rater1_word, DF$rater2_word)
rater1 = DF$rater1_score
rater2 = DF$rater2_score
temp <- na.omit(data.frame(rater1, rater2))
temp
match_table <- table(temp$rater1, temp$rater2)
match_table
match_table[4]
b <- match_table[3] #yes,no
b
b <- match_table[2] #yes,no
b
c <- match_table[3]
confidence = .95
qnorm(1-confidence, lower.tail = FALSE)
qnorm((1-confidence)/2, lower.tail = FALSE)
kappa <- function(rater1, rater2, confidence = .95) {
#if rater1 is a string
if(is.character(rater1)|is.factor(rater1)){
#if rater2 is also a string
if(is.character(rater2)|is.factor(rater2)){
rater1 <- as.character(rater1)
rater2 <- as.character(rater2)
match <- rater1 == rater2
p_agree <- sum(match) / length(match) * 100
return(p_agree)
}
}
#if both numeric
if(is.numeric(rater1) & is.numeric(rater2)){
temp <- na.omit(data.frame(rater1, rater2))
match_table <- table(temp$rater1, temp$rater2)
a <- match_table[4] #yes,yes
b <- match_table[2] #yes,no
c <- match_table[3] #no,yes
d <- match_table[1] #no,no
p_agree <- (a+d)/(a+b+c+d)
p_yes <- ((a+b)/(a+b+c+d)) * ((a+c)/(a+b+c+d))
p_no <- ((c+d)/(a+b+c+d)) * ((b+d)/(a+b+c+d))
p_error <- p_yes + p_no
kappa <- (p_agree - p_error) / (1 - p_error)
se_kappa <- sqrt( (p_agree*(1-p_agree)) / (nrow(temp)*(1-p_error)^2) )
if (confidence >= 1 | confidence <= 0){
stop("Confidence values must be between 0 and 1.")
} else {
kappa_LL <- kappa - qnorm((1-confidence)/2, lower.tail = FALSE) * se_kappa
kappa_UL <- kappa + qnorm((1-confidence)/2, lower.tail = FALSE) * se_kappa
}
return(list(
p_agree = p_agree/nrow(temp)*100, #percent agree
kappa = kappa,
se_kappa = se_kappa,
kappa_LL = kappa_LL,
kappa_UL = kappa_UL
))
} else {
stop ("Please check both variables are characters/factors or numeric.")
}
}
kappa(DF$rater1_word, DF$rater2_word)
kappa(DF$rater1_score, DF$rater2_score)
kappa(DF$rater1_score, DF$rater2_score, confidence = 1)
kappa(DF$rater1_score, DF$rater2_score, confidence = .94)
temp
cor(temp)
length(match_table)
table(rater1[1:2], rater2[1:2])
length(table(rater1[1:2], rater2[1:2]))
length(table(rater1[1:3], rater2[1:3]))
table(rater1[1:3], rater2[1:3])
kappa(as.character(DF$rater1_score), as.character(DF$rater2_score), confidence = .94)
temp <- na.omit(data.frame(rater1, rater2))
match_table <- table(temp$rater1, temp$rater2)
a <- match_table[4] #yes,yes
b <- match_table[2] #yes,no
c <- match_table[3] #no,yes
d <- match_table[1] #no,no
p_agree <- (a+d)/(a+b+c+d)
p_agree
