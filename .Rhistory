sub1 = subset(input,
input$diff >= 1)
sub2 = subset(input,
input$diff == 0)
sub3 = subset(input,
input$diff < 0)
sub1 = sub1[ , -c(4:6)]
sub2 = sub2[ , -c(4:6)]
sub3 = sub3[ , -c(4:6)]
char.x1 = vector(mode = "character", length = nrow(sub1))
char.x2 = vector(mode = "character", length = nrow(sub2))
char.x3 = vector(mode = "character", length = nrow(sub3))
char.y1 = vector(mode = "character", length = nrow(sub1))
char.y2 = vector(mode = "character", length = nrow(sub2))
char.y3 = vector(mode = "character", length = nrow(sub3))
percent_match1 = vector(mode = "character", length = nrow(sub1))
percent_match2 = vector(mode = "character", length = nrow(sub2))
percent_match3 = vector(mode = "character", length = nrow(sub3))
for (i in 1:nrow(sub1)) {
char.x1[i] = strsplit(sub1$x[i], "")
char.y1[i] = strsplit(sub1$key[i], "")
}
for (k in 1:nrow(sub1)) {
c = char.x1[[k]]
d = char.y1[[k]]
cc = strsplit(c, "")[[k]]
dd = strsplit(d, "")[[d]]
percent_match1[k] = length(intersect(cc, dd)) /
max(length(unique(cc)), length(unique(dd))
sub1$percent_match = percent_match1
}
for (h in 1:nrow(sub2)) {
char.x2[h] = strsplit(sub2$x[h], "")
char.y2[h] = strsplit(sub2$key[h], "")
}
for (j in 1:nrow(sub2)) {
e = char.x2[[j]]
f = char.y2[[j]]
percent_match2[j] = length(na.omit(f[is.element(e, f)])) /
length(e)
sub2$percent_match = percent_match2
}
for (q in 1:nrow(sub3)) {
char.x3[q] = strsplit(sub3$x[q], "")
char.y3[q] = strsplit(sub3$key[q], "")
}
for (p in 1:nrow(sub3)) {
r = char.x3[[p]]
s = char.y3[[p]]
percent_match3[p] = length(unique(r[r %in% s[s %in% r]])) /
length(s)
sub3$percent_match = percent_match3
}
output = rbind(sub1, sub2, sub3)
colnames(output)[2] = "Response"
output = output[order(as.numeric(rownames(output))),,drop = FALSE]
if (nb == FALSE){
output$Scored = as.numeric(output$percent_match >= cutoff)
other = data.frame(other)
output3 = cbind(output, other)
print(output3)
}
else if (nb == TRUE){
output$Scored = as.numeric(output$percent_match >= cutoff)
print(output)
}
else if (weight == TRUE){
if (weight.by <= 1 & is.null(weight.by) == FALSE){
sub4 = subset(output,
output$percent_match == 1)
sub5 = subset(output,
output$percent_match == 0)
sub6 = subset(output,
output$percent_match < 1 & output$percent_match > 0)
sub4$weighted_match = as.numeric(sub4$percent_match)
sub5$weighted_match = as.numeric(sub5$percent_match)
sub6$weighted_match = as.numeric(sub6$percent_match) + (weight.by / nchar(sub6$key))
output2 = rbind(sub4, sub5, sub6)
output2 = output2[order(as.numeric(rownames(output2))),,drop = FALSE]
print(output2)
}
else if (is.null(weight.by) == FALSE & weight.by > 1) {
print("weight.by must be a value between 0 and 1!")
}
}
else if (weight == FALSE) {
print(output)
}
}
####Testing percent match####
Percent_Match2 = function(x, key = y, id = z, weight = FALSE, weight.by = NULL,
other = NULL, cutoff = qqq){
nb = is.null(other)
xx = weight.by
input = data.frame(id, x, key)
input$id = as.character(input$id)
input$x = as.character(input$x)
input$key = as.character(input$key)
input$length_x = nchar(input$x)
input$length_key = nchar(input$key)
input$diff = input$length_x - input$length_key
sub1 = subset(input,
input$diff >= 1)
sub2 = subset(input,
input$diff == 0)
sub3 = subset(input,
input$diff < 0)
sub1 = sub1[ , -c(4:6)]
sub2 = sub2[ , -c(4:6)]
sub3 = sub3[ , -c(4:6)]
char.x1 = vector(mode = "character", length = nrow(sub1))
char.x2 = vector(mode = "character", length = nrow(sub2))
char.x3 = vector(mode = "character", length = nrow(sub3))
char.y1 = vector(mode = "character", length = nrow(sub1))
char.y2 = vector(mode = "character", length = nrow(sub2))
char.y3 = vector(mode = "character", length = nrow(sub3))
percent_match1 = vector(mode = "character", length = nrow(sub1))
percent_match2 = vector(mode = "character", length = nrow(sub2))
percent_match3 = vector(mode = "character", length = nrow(sub3))
for (i in 1:nrow(sub1)) {
char.x1[i] = strsplit(sub1$x[i], "")
char.y1[i] = strsplit(sub1$key[i], "")
}
for (k in 1:nrow(sub1)) {
c = char.x1[[k]]
d = char.y1[[k]]
cc = strsplit(c, "")[[k]]
dd = strsplit(d, "")[[d]]
percent_match1[k] = length(intersect(cc, dd)) /
max(length(unique(cc)), length(unique(dd))
sub1$percent_match = percent_match1
}
for (h in 1:nrow(sub2)) {
char.x2[h] = strsplit(sub2$x[h], "")
char.y2[h] = strsplit(sub2$key[h], "")
}
for (j in 1:nrow(sub2)) {
e = char.x2[[j]]
f = char.y2[[j]]
percent_match2[j] = length(na.omit(f[is.element(e, f)])) /
length(e)
sub2$percent_match = percent_match2
}
for (q in 1:nrow(sub3)) {
char.x3[q] = strsplit(sub3$x[q], "")
char.y3[q] = strsplit(sub3$key[q], "")
}
for (p in 1:nrow(sub3)) {
r = char.x3[[p]]
s = char.y3[[p]]
percent_match3[p] = length(unique(r[r %in% s[s %in% r]])) /
length(s)
sub3$percent_match = percent_match3
}
output = rbind(sub1, sub2, sub3)
colnames(output)[2] = "Response"
output = output[order(as.numeric(rownames(output))),,drop = FALSE]
if (nb == FALSE){
output$Scored = as.numeric(output$percent_match >= cutoff)
other = data.frame(other)
output3 = cbind(output, other)
print(output3)
}
else if (nb == TRUE){
output$Scored = as.numeric(output$percent_match >= cutoff)
print(output)
}
else if (weight == TRUE){
if (weight.by <= 1 & is.null(weight.by) == FALSE){
sub4 = subset(output,
output$percent_match == 1)
sub5 = subset(output,
output$percent_match == 0)
sub6 = subset(output,
output$percent_match < 1 & output$percent_match > 0)
sub4$weighted_match = as.numeric(sub4$percent_match)
sub5$weighted_match = as.numeric(sub5$percent_match)
sub6$weighted_match = as.numeric(sub6$percent_match) + (weight.by / nchar(sub6$key))
output2 = rbind(sub4, sub5, sub6)
output2 = output2[order(as.numeric(rownames(output2))),,drop = FALSE]
print(output2)
}
else if (is.null(weight.by) == FALSE & weight.by > 1) {
print("weight.by must be a value between 0 and 1!")
}
}
else if (weight == FALSE) {
print(output)
}
}
install.packages("vecsets")
library(vecsets)
x = "cat"
y = "dog"
z = "doggy"
intersect(x, y)
intersect(y, z)
xx = strsplit(x, "")
xx
yy = strslit(y, "")
yy = strsplit(y, "")
zz = strsplit(z, "")
length(intersect(yy, zz)) / max(length(unique(yy)), length(unique(zz)))
Percent_Match = function(x, key = y, id = z, weight = FALSE, weight.by = NULL,
other = NULL, cutoff = qqq){
nb = is.null(other)
xx = weight.by
input = data.frame(id, x, key)
input$id = as.character(input$id)
input$x = as.character(input$x)
input$key = as.character(input$key)
input$length_x = nchar(input$x)
input$length_key = nchar(input$key)
input$diff = input$length_x - input$length_key
sub1 = subset(input,
input$diff >= 1)
sub2 = subset(input,
input$diff == 0)
sub3 = subset(input,
input$diff < 0)
sub1 = sub1[ , -c(4:6)]
sub2 = sub2[ , -c(4:6)]
sub3 = sub3[ , -c(4:6)]
char.x1 = vector(mode = "character", length = nrow(sub1))
char.x2 = vector(mode = "character", length = nrow(sub2))
char.x3 = vector(mode = "character", length = nrow(sub3))
char.y1 = vector(mode = "character", length = nrow(sub1))
char.y2 = vector(mode = "character", length = nrow(sub2))
char.y3 = vector(mode = "character", length = nrow(sub3))
percent_match1 = vector(mode = "character", length = nrow(sub1))
percent_match2 = vector(mode = "character", length = nrow(sub2))
percent_match3 = vector(mode = "character", length = nrow(sub3))
for (i in 1:nrow(sub1)) {
char.x1[i] = strsplit(sub1$x[i], "")
char.y1[i] = strsplit(sub1$key[i], "")
}
for (k in 1:nrow(sub1)) {
c = char.x1[[k]]
d = char.y1[[k]]
percent_match1[k] = length(na.omit(d[is.element(c, d)])) /
length(c)
sub1$percent_match = percent_match1
}
for (h in 1:nrow(sub2)) {
char.x2[h] = strsplit(sub2$x[h], "")
char.y2[h] = strsplit(sub2$key[h], "")
}
for (j in 1:nrow(sub2)) {
e = char.x2[[j]]
f = char.y2[[j]]
percent_match2[j] = length(na.omit(f[is.element(e, f)])) /
length(e)
sub2$percent_match = percent_match2
}
for (q in 1:nrow(sub3)) {
char.x3[q] = strsplit(sub3$x[q], "")
char.y3[q] = strsplit(sub3$key[q], "")
}
for (p in 1:nrow(sub3)) {
r = char.x3[[p]]
s = char.y3[[p]]
percent_match3[p] = length(unique(r[r %in% s[s %in% r]])) /
length(s)
sub3$percent_match = percent_match3
}
output = rbind(sub1, sub2, sub3)
colnames(output)[2] = "Response"
output = output[order(as.numeric(rownames(output))),,drop = FALSE]
if (nb == FALSE){
output$Scored = as.numeric(output$percent_match >= cutoff)
other = data.frame(other)
output3 = cbind(output, other)
print(output3)
}
else if (nb == TRUE){
output$Scored = as.numeric(output$percent_match >= cutoff)
print(output)
}
}
length(intersect(yy, zz)) / max(length(unique(yy)), length(unique(zz)))
x = "asdf"
y = "fdjk"
z = "aadf"
char.x <- strsplit(x, "")[[1]]
char.x
char.y <- strsplit(y, "")[[1]]
char.y
char.z <- strsplit(z, "")[[1]]
char.z
length(intersect(char.x, char.y)) /
max(length(unique(char.x)), length(unique(char.y)))
length(intersect(char.x, char.z)) /
max(length(unique(char.x)), length(unique(char.z)))
a = "aadfs"
length(intersect(char.x, char.z)) /
max(length(unique(char.x)), length(unique(char.a)))
char.a <- strsplit(a, "")[[1]]
char.a
length(intersect(char.x, char.a)) /
max(length(unique(char.x)), length(unique(char.a)))
length(vintersect(char.x, char.a)) /
max(length(unique(char.x)), length(unique(char.a)))
max(length(unique(char.x)), length(unique(char.a)))
char.a <- strsplit(a, "")[[1]]
char.a
length(vintersect(char.x, char.a))
length(intersect(char.x, char.a))
length(vintersect(char.x, char.a)) /
max(length(unique(char.x)), length(unique(char.a)))
length(vintersect(char.a, char.x)) /
max(length(unique(char.x)), length(unique(char.a)))
length(vintersect(char.a, char.x)) /
max(length(unique(char.a)), length(unique(char.x)))
vintersect(char.a, char.x)
length(unique(char.x))
length(vintersect(char.a, char.x)) /
max(length((char.a)), length((char.x)))
length(vintersect(char.x, char.a)) /
max(length((char.x)), length((char.a)))
length(intersect(char.x, char.a)) /
max(length((char.x)), length((char.a)))
intersect(char.x, char.a)
vintersect(char.x, char.a)
b = "aadfsa"
char.b <- strsplit(b, "")[[1]]
char.b
length(vintersect(char.b, char.a)) /
max(length((char.b)), length((char.a)))
length(vintersect(char.b, char.a))
vintersect(char.b, char.a)
intersect(char.b, char.a)
length(intersect(char.b, char.a)) /
max(length((char.b)), length((char.a)))
Percent_Match2 = function(x, key = y, id = z, weight = FALSE, weight.by = NULL,
other = NULL, cutoff = qqq){
nb = is.null(other)
xx = weight.by
input = data.frame(id, x, key)
input$id = as.character(input$id)
input$x = as.character(input$x)
input$key = as.character(input$key)
input$length_x = nchar(input$x)
input$length_key = nchar(input$key)
input$diff = input$length_x - input$length_key
sub1 = subset(input,
input$diff >= 1)
sub2 = subset(input,
input$diff == 0)
sub3 = subset(input,
input$diff < 0)
sub1 = sub1[ , -c(4:6)]
sub2 = sub2[ , -c(4:6)]
sub3 = sub3[ , -c(4:6)]
char.x1 = vector(mode = "character", length = nrow(sub1))
char.x2 = vector(mode = "character", length = nrow(sub2))
char.x3 = vector(mode = "character", length = nrow(sub3))
char.y1 = vector(mode = "character", length = nrow(sub1))
char.y2 = vector(mode = "character", length = nrow(sub2))
char.y3 = vector(mode = "character", length = nrow(sub3))
percent_match1 = vector(mode = "character", length = nrow(sub1))
percent_match2 = vector(mode = "character", length = nrow(sub2))
percent_match3 = vector(mode = "character", length = nrow(sub3))
for (i in 1:nrow(sub1)) {
char.x1[i] = strsplit(sub1$x[i], "")
char.y1[i] = strsplit(sub1$key[i], "")
}
for (k in 1:nrow(sub1)) {
c = char.x1[[k]]
d = char.y1[[k]]
percent_match1[k] = length(vintersect(c, d)) /
max(length((c)), length((d)))
sub1$percent_match = percent_match1
}
for (h in 1:nrow(sub2)) {
char.x2[h] = strsplit(sub2$x[h], "")
char.y2[h] = strsplit(sub2$key[h], "")
}
for (j in 1:nrow(sub2)) {
e = char.x2[[j]]
f = char.y2[[j]]
percent_match2[j] = length(vintersect(e, f)) /
max(length((e)), length((f)))
sub2$percent_match = percent_match2
}
for (q in 1:nrow(sub3)) {
char.x3[q] = strsplit(sub3$x[q], "")
char.y3[q] = strsplit(sub3$key[q], "")
}
for (p in 1:nrow(sub3)) {
r = char.x3[[p]]
s = char.y3[[p]]
percent_match3[p] = length(vintersect(r, s)) /
max(length((r)), length((s)))
sub3$percent_match = percent_match3
}
output = rbind(sub1, sub2, sub3)
colnames(output)[2] = "Response"
output = output[order(as.numeric(rownames(output))),,drop = FALSE]
if (nb == FALSE){
output$Scored = as.numeric(output$percent_match >= cutoff)
other = data.frame(other)
output3 = cbind(output, other)
print(output3)
}
else if (nb == TRUE){
output$Scored = as.numeric(output$percent_match >= cutoff)
print(output)
}
}
matched2 = Percent_Match2(dat$Response, key = dat$Target, id = dat$Subject, other = dat$Condition, cutoff = .75)
dat = read.csv("homphones.csv")
dat2 = read.csv("homphones.csv")
dat2 = dat2[ , -4]
matched2 = Percent_Match2(dat$Response, key = dat$Target, id = dat$Subject, other = dat$Condition, cutoff = .75)
library(lrd)
matched = percent_match(dat$Response, key = dat$Target, id = dat$Subject)
View(matched)
View(matched2)
5/6
runApp('~/LRD Shiny Test')
rsconnect::deployApp('C:/Users/nickm.000/Documents/GitHub/lrd/lrdSHINY')
rsconnect::deployApp('C:/Users/nickm.000/Documents/GitHub/lrd/lrdSHINY')
rsconnect::deployApp('C:/Users/nickm.000/Documents/GitHub/lrd/lrdSHINY')
runApp(list(
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris')),
uiOutput('columns')
),
server = function(input, output){
output$columns = renderUI({
mydata = get(input$dataset)
selectInput('columns2', 'Columns', names(mydata))
})
}
))
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp(list(
ui = bootstrapPage(
textInput("text", "Enter Formula", "a=b+c"),
uiOutput('variables')
),
server = function(input, output){
outVar <- reactive({
vars <- all.vars(parse(text = input$text))
vars <- as.list(vars)
return(vars)
})
output$variables = renderUI({
selectInput('variables2', 'Variables', outVar())
})
}
))
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
dat = read.csv("app test 2.csv")
dat[1]
colnames(dat)
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
outVar <- reactive({
vars <- all.vars(parse(text = input$text))
vars <- as.list(vars)
return(vars)
})
runApp(list(
ui = bootstrapPage(
textInput("text", "Enter Formula", "a=b+c"),
uiOutput('variables')
),
server = function(input, output){
outVar <- reactive({
vars <- all.vars(parse(text = input$text))
vars <- as.list(vars)
return(vars)
})
output$variables = renderUI({
selectInput('variables2', 'Variables', outVar())
})
}
))
dat = read.csv("app test 2.csv")
dat[1]
colnames(dat)
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
names(dat)
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
names(dat)
names(dat[ , c(1)])
colnames(dat)
colnames(dat[1])
colnames(dat[ , c(1)])
colnames(dat[ , c(1, 2)])
colnames(dat[ , c( , 1:length(dat))])
colnames(dat[ , c(1:length(dat))])
colnames(dat[ , c(1, 3:length(dat))])
runApp('~/LRD Shiny Test')
runApp('~/LRD Shiny Test')
