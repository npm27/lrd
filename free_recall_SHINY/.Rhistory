##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = c(temp4, temp5)
}
print(temp4)
#for (i in output2$Proportion_Correct){
#}
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
prop.correct.f2 = function(x, key = y, id = z, flag = FALSE, group.by = NULL){
a = is.null(group.by)
input = data.frame(id, x)
temp = c() #Make a blank vector for storage
temp2 = c()
temp3 = c()
temp4 = c()
if (a == TRUE & flag == FALSE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
print(output2)
}
else if (a == TRUE & flag == TRUE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
output2$Flagged = rep(" ")
output2$Flagged[output2$z >= 3] = "*"
output2$Flagged[output2$z <= -3] = "*"
colnames(output2)[4] = " "
print(output2)
}
else if (a == FALSE & flag == FALSE){
input = cbind(input, group.by)
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = cbind(temp4, temp5)
}
print(temp4)
#for (i in output2$Proportion_Correct){
#}
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
prop.correct.f2 = function(x, key = y, id = z, flag = FALSE, group.by = NULL){
a = is.null(group.by)
input = data.frame(id, x)
temp = c() #Make a blank vector for storage
temp2 = c()
temp3 = c()
temp4 = data.frame()
if (a == TRUE & flag == FALSE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
print(output2)
}
else if (a == TRUE & flag == TRUE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
output2$Flagged = rep(" ")
output2$Flagged[output2$z >= 3] = "*"
output2$Flagged[output2$z <= -3] = "*"
colnames(output2)[4] = " "
print(output2)
}
else if (a == FALSE & flag == FALSE){
input = cbind(input, group.by)
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = cbind(temp4, temp5)
}
print(temp4)
#for (i in output2$Proportion_Correct){
#}
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
prop.correct.f2 = function(x, key = y, id = z, flag = FALSE, group.by = NULL){
a = is.null(group.by)
input = data.frame(id, x)
temp = c() #Make a blank vector for storage
temp2 = c()
temp3 = c()
temp4 = data.frame()
if (a == TRUE & flag == FALSE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
print(output2)
}
else if (a == TRUE & flag == TRUE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
output2$Flagged = rep(" ")
output2$Flagged[output2$z >= 3] = "*"
output2$Flagged[output2$z <= -3] = "*"
colnames(output2)[4] = " "
print(output2)
}
else if (a == FALSE & flag == FALSE){
input = cbind(input, group.by)
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = rbind(temp4, temp5)
}
print(temp4)
#for (i in output2$Proportion_Correct){
#}
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
prop.correct.f2 = function(x, key = y, id = z, flag = FALSE, group.by = NULL){
a = is.null(group.by)
input = data.frame(id, x)
temp = c() #Make a blank vector for storage
temp2 = c()
temp3 = c()
temp4 = data.frame()
if (a == TRUE & flag == FALSE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
print(output2)
}
else if (a == TRUE & flag == TRUE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
output2$Flagged = rep(" ")
output2$Flagged[output2$z >= 3] = "*"
output2$Flagged[output2$z <= -3] = "*"
colnames(output2)[4] = " "
print(output2)
}
else if (a == FALSE & flag == FALSE){
input = cbind(input, group.by)
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = rbind(temp4, temp5)
}
print(temp4)
#Convert to a vector
temp4 = temp4[[temp4]]
print(temp4)
#for (i in output2$Proportion_Correct){
#}
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
prop.correct.f2 = function(x, key = y, id = z, flag = FALSE, group.by = NULL){
a = is.null(group.by)
input = data.frame(id, x)
temp = c() #Make a blank vector for storage
temp2 = c()
temp3 = c()
temp4 = data.frame()
if (a == TRUE & flag == FALSE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
print(output2)
}
else if (a == TRUE & flag == TRUE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
output2$Flagged = rep(" ")
output2$Flagged[output2$z >= 3] = "*"
output2$Flagged[output2$z <= -3] = "*"
colnames(output2)[4] = " "
print(output2)
}
else if (a == FALSE & flag == FALSE){
input = cbind(input, group.by)
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = rbind(temp4, temp5)
}
print(temp4)
#Convert to a vector
temp4 = as.vector(temp4[ , 1])
print(temp4)
#for (i in output2$Proportion_Correct){
#}
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
prop.correct.f2 = function(x, key = y, id = z, flag = FALSE, group.by = NULL){
a = is.null(group.by)
input = data.frame(id, x)
temp = c() #Make a blank vector for storage
temp2 = c()
temp3 = c()
temp4 = data.frame()
if (a == TRUE & flag == FALSE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
print(output2)
}
else if (a == TRUE & flag == TRUE) {
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
input2 = subset(input, #subset by participant id
input$id == i)
output = as.numeric(table(input2$x))[2] / k #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
}
name.list = unique(input$id)
output2 = data.frame(name.list, temp)
colnames(output2)[1:2] = c("ID", "Proportion_Correct")
output2$Z = scale(output2$Proportion_Correct)
output2$Flagged = rep(" ")
output2$Flagged[output2$z >= 3] = "*"
output2$Flagged[output2$z <= -3] = "*"
colnames(output2)[4] = " "
print(output2)
}
else if (a == FALSE & flag == FALSE){
input = cbind(input, group.by)
k = length(key)
##Get number of 1's for each participant
for (i in unique(input$id)){
for (g in unique(input$group.by)){
input2 = subset(input, #subset by participant id
input$id == i)
input3 = subset(input2,
input2$group.by == g)
#print(input3)
output = as.numeric(table(input3$x))[2] #Get each participants total number of correct responses and divide by key
temp = c(output, temp)
temp2 = c(temp2, g)
temp3 = c(temp3, i)
}
}
name.list = data.frame(temp3)
conditions = data.frame(temp2)
output2 = data.frame(temp3, temp, temp2)
colnames(output2)[1:3] = c("ID", "Proportion_Correct", "Condition")
print(output2$Proportion_Correct) ##Need to take these...
output3 = tapply(input$x, list(input$id, input$group.by), length) ##And divide them by these
output3 = data.frame(output3)
print(output3)
for (i in 1:length(output3)){
temp5 = output3[ , i]
temp5 = data.frame(temp5)
colnames(temp5)[1] = "Value"
temp4 = rbind(temp4, temp5)
}
print(temp4)
#Convert to a vector
temp4 = as.vector(temp4[ , 1])
print(temp4)
output2$Proportion_Correct = output2$Proportion_Correct / temp4
print(output2)
}
}
prop.correct.f2(dat$Scored, id = dat$Condition.2, key = dat$Scored, group.by = dat$Disease.Condition)
setwd("~/GitHub/lrd/free_recall_SHINY")
